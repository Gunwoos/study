# 1

**1. 프로그램**
  - 처리방법과 순서를 기술한 명령문의 집합체

**2. 프로세스**
  - 현재 실행중이 프로그램의 작업단위

**3. 메모리의 구조**

  1. Bss+Data 
	   - 변수가 저장되는 곳
    
  2. text
	   - 코드 기계어로 저장되는 곳
    
  3. 힙
	  - 사용자의 동적 할당
    
 4. 스택
	  - 지역 변수, 매개 변수

**4. Stack**
  - LIFO(last in first out)
  - 마지막에 들어온 데이터가 제일 먼저 나가는 방식의 데이터 저장 형식
  
**5. Queue**
  - FIFO(first in first out)
  -  처음 들어온 데이터가 제일 먼저 나가는 방식의 데이터 저장 형식
  
**6. Data Unit**
  - Bit : true or false 두 가 상태만을 표현하는 정보 표현의 최소 단위
  - Nibble : 1 nibble = 4 bit
  - Byte : 문자 하나를 나타내는 최소 단위 1 Byte=8 Bit
  - Word : cpu 레지스터와 메모리 사이에 한 번의 연산을 전송할 수 있는 데이터 단위
  
**7.진법**
1.  2진법
	- 컴퓨터에서 사용됨
	- ex) 1001 = 9
    
2. 10진법
	 - 일상적인 숫자 체계
    
 3. 16진법
	   - 10=A, 11=B, 12=C, 13=D, 14=E, 15=F
	   - ex) 47 = 2D
    
3. 10진수 소수점을 2진수로 변환
	- 10진수 소수저a을 2진수로 소수점이 1이 될 때 까지 2를 곱함 ( 결과값이 1 미만이면 0 1 초과시 1 )
	- 1이 나오지 않으면 무한반복이 되는 수도 존재
	- ex)
		-  0.4 * 2 = 0.8 -> 0
		- 0.8 * 2 = 1.6 -> 1
	
4. 2진수의 소수점을 10진수로 변환
	- n번째 소수점*(1/2)^n

5. 고정 소수점
	- 소수점 위치가 고정
6. 부동 소수점
	- 소수점 위치가 가변적

**8. 음수의 표현**

  1. 부호비트
	  - 부호 비트를 2진수의 절대 값으로 수를 표현
 2.  1의 보수
		- 부호 비트를 제외한 나머지 비트는 1과 영을 반전한 값으로 수를 표현   

6. 2의 보수
	-  부호 비트를 제외한 나머지 비트는 1과 0을 반전한 값에 1을 더한 값으로 수를 표현

**9. 비트연산자**

1. &
	- AND 연산자 둘다 참일 때 만족
2. |
	- OR 연산, 둘 중 하나만 참이어도 만족
3. ^
	- XOR 연산, 둘 중 하나만 참일 때 만족
4. ~
	- 보수 연산
5. <<
	- 왼쪽 시프트 연산, 변수의 값을 왼쪽으로 지정된 비트 수 만큼 이동
6. >>
	- 오른쪽 ㅅl프트 연산, 변수의 값을 오른쪽으로 지정된 비트 수 만큼 이동

**10. 논리 연산자**

1. AND
	- &&
	- 둘다 참이어야 참
2. OR
	- ||
	- 둘중 하나만 참이어도 참
3. NOT
	- !
	- 참을 거짓으로, 거짓을 참으로

**11. Naming Convention**

1. Pascal case ( upper camel case )
	- 모든 단어의 첫 시작을 대문자로
2. Camel case ( lower camel case )
	- 시작 부분을 제외한 각 단어의 첫 글자를 대문자로
3. Hungarian case
	- 각 타입의 축약어를 변수명의 접두어로 사용
4. Snake case
	- 변수명의 각 단어를 언더바(_)를 통해서 구분
5. Kebab case ( Dash case )
	- 변수명의 각 단어를 하이픈(-)을 통해서 구분

 
# 2

1. Git

2. GitHub

3. MarkDown

# 3
1. Kernel

2. Shell

3. Command

4. VI
